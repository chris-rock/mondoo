name: Run Release Workflows

on:
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      version:
        description: "Version that should be released"
        required: true
        default: "1.2.3"
        type: string
      skip-release:
        description: "Skip release?"
        required: false
        default: false
        type: boolean

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Get Version (Workflow Dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo VERSION=${{ inputs.version }} >> $GITHUB_ENV
      - name: Get Version (Release Event)
        if: github.event_name == 'release'
        run: |
          echo VERSION=${{ github.event.release.tag_name }} >> $GITHUB_ENV
      - name: Set Version
        id: version
        run: |
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  create-release:
    runs-on: ubuntu-latest
    needs: get-version
    if: github.event_name == 'workflow_dispatch' && ! inputs.skip-release
    steps:
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ inputs.version }}
          tag_name: ${{ inputs.version }}

  release_mondoo_pkgs:
    name: Trigger release_mondoo_pkgs workflow
    uses: ./.github/workflows/release_mondoo_pkgs.yaml
    needs: get-version
    with:
      version: ${{ needs.get-version.outputs.version }}
      skip-release: ${{ inputs.skip-release }}
    secrets:
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      REPO_API_TOKEN: ${{ secrets.REPO_API_TOKEN }}

  update-version:
    name: Trigger update-version workflow
    uses: ./.github/workflows/update-version.yml
    needs: get-version
    with:
      version: ${{ needs.get-version.outputs.version }}
      skip-commit: ${{ inputs.skip-release }}

  build_container:
    name: Trigger build_container workflow
    uses: ./.github/workflows/build_container.yml
    with:
      push: ${{ ! inputs.skip-release }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  pkg_macos:
    name: Trigger pkg_macos workflow
    uses: ./.github/workflows/pkg_macos.yaml
    needs: get-version
    with:
      version: ${{ needs.get-version.outputs.version }}
      skip-publish: ${{ inputs.skip-release }}
    secrets:
      APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
      APPLE_KEYS_PRODUCTSIGN_P12: ${{ secrets.APPLE_KEYS_PRODUCTSIGN_P12 }}
      APPLE_KEYS_CODESIGN_P12: ${{ secrets.APPLE_KEYS_CODESIGN_P12 }}
      APPLE_KEYS_PASSWORD: ${{ secrets.APPLE_KEYS_PASSWORD }}
      APPLE_KEYS_CODESIGN_ID: ${{ secrets.APPLE_KEYS_CODESIGN_ID }}
      APPLE_KEYS_PRODUCTSIGN_ID: ${{ secrets.APPLE_KEYS_PRODUCTSIGN_ID }}
      APPLE_ACCOUNT_USERNAME: ${{ secrets.APPLE_ACCOUNT_USERNAME }}
      APPLE_ACCOUNT_PASSWORD: ${{ secrets.APPLE_ACCOUNT_PASSWORD }}
      APPLE_ACCOUNT_TEAM_ID: ${{ secrets.APPLE_ACCOUNT_TEAM_ID }}
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      RELEASR_ACTION_TOKEN: ${{ secrets.RELEASR_ACTION_TOKEN }}
      REPO_API_TOKEN: ${{ secrets.REPO_API_TOKEN }}

  pkg_arch-aur:
    name: Trigger pkg_arch-aur workflow
    uses: ./.github/workflows/pkg_arch-aur.yaml
    needs: get-version
    with:
      version: ${{ needs.get-version.outputs.version }}
      skip: ${{ inputs.skip-release }}
    secrets:
      AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
      AUR_EMAIL: ${{ secrets.AUR_EMAIL }}
      AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

  pkg_chocolatey:
    name: Trigger pkg_chocolatey workflow
    uses: ./.github/workflows/pkg_chocolatey.yaml
    needs: get-version
    with:
      version: ${{ needs.get-version.outputs.version }}
      skip-publish: ${{ inputs.skip-release }}
    secrets:
      CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

  pkg_msi:
    name: Trigger pkg_msi workflow
    uses: ./.github/workflows/pkg_msi.yaml
    needs: get-version
    with:
      version: ${{ needs.get-version.outputs.version }}
      skip-publish: ${{ inputs.skip-release }}
    secrets:
      SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
      SM_HOST: ${{ secrets.SM_HOST }}
      SM_API_KEY: ${{ secrets.SM_API_KEY }}
      SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
      SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      RELEASR_ACTION_TOKEN: ${{ secrets.RELEASR_ACTION_TOKEN }}

  test_install_sh:
    name: Trigger test_install_sh workflow
    uses: ./.github/workflows/test_install_sh.yml
    needs: update-version
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

  test-released-all:
    name: Trigger test-released-all workflow
    uses: ./.github/workflows/test-released-all.yaml
    with:
      version: ${{ needs.get-version.outputs.version }}
    needs:
      - get-version
      - release_mondoo_pkgs
      - build_container
      - pkg_macos
      - pkg_arch-aur
      - pkg_chocolatey
      - pkg_msi
      - test_install_sh

  integration-tests:
    name: Trigger integration test workflow
    runs-on: ubuntu-latest
    if: ${{ ! inputs.skip-release }}
    needs:
      - get-version
      - test-released-all
    steps:
      - name: Run integration test workfow
        env:
          GH_TOKEN: ${{ secrets.REPO_API_TOKEN }}
        run: gh workflow run test.yaml --repo "mondoohq/integration-test" --field version=${{ needs.get-version.outputs.version }}
